{
  "compilerOptions": {
    //* Set the JavaScript language version for emitted JavaScript and include compatible library declarations.
    "target": "es5",
    //* Specify a set of bundled library declaration files that describe the target runtime environment.
    "lib": ["dom", "dom.iterable", "esnext"],
    //* Allow JavaScript files to be a part of your program. Use the checkJS option to get errors from these files.
    "allowJs": true,
    //* Skip type checking all .d.ts files.
    "skipLibCheck": true,
    //* Enable all strict type checking options.
    "strict": true,
    //* Ensure that casing is correct in imports.
    "forceConsistentCasingInFileNames": true,
    //* Disable emitting file from a compilation.
    "noEmit": true,
    //* Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility.
    "esModuleInterop": true,
    //* Specify what module code is generated.
    "module": "esnext",
    //* Specify how TypeScript looks up a file from a given module specifier.
    "moduleResolution": "node",
    //* Enable importing .json files
    "resolveJsonModule": true,
    //* Ensure that each file can be safely transpiled without relying on other imports.
    "isolatedModules": true,

   //* The line `"jsx": "preserve"` in the JSON configuration file is specifying how TypeScript should
   //* handle JSX code.
    "jsx": "preserve",

    //* The `"incremental": true` setting in the JSON configuration file enables incremental compilation
    //* in TypeScript. Incremental compilation is a feature that allows TypeScript to only recompile
    //* files that have changed since the last compilation, instead of recompiling the entire project.
    //* This can significantly improve build times, especially for larger projects.
    "incremental": true,

    //* The `"plugins"` section in the JSON configuration file is specifying a plugin named "next". This
    //* plugin is likely a custom plugin that extends or modifies the behavior of the TypeScript
    //* compiler. The specific functionality provided by the "next" plugin would depend on its
    //* implementation.
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": "./",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
